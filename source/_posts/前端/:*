/*
 * 扫码和支付都会跳转到本页面，根据 data.healType === 'payCharge'判断
 * 1.支付跳转 chargeDevice方法
 * 2.扫码跳转 connectDevice方法3
 * onShow方法中的closeGoIndex是为了避免进入到pay页面后被重定向到首页
 * 支付之后没有进入充电流程，关闭后再次扫码进入到本页面，跳过支付流程
 * 支付之后进入到充电流程（即进入loading页），关闭后再次扫码进入到本页面，直接进入time页
 */

import gs from '../../Data/gs';
import newData from '../../Data/data';
import login from '../../Data/login';
import error from '../../Data/error';
import log from '../../Data/log';
import utils from '../../Data/utils';

var app = getApp();

Page({
  data: {
    logs: [],
    healType: 'connect',
    macAddress: '',
    isPaid: false,
    isWork: false,
    isConnect: 'no_connect',
    isShowPrompt: true,
    isPrompt: '正在连接小怪兽，请不要关闭此页面',
    isTitle: '连接不上？',
    isContent: '可尝试重启手机蓝牙后再次扫码',
    time_length: '',
    charge_time: '',
    devices_timer: [],
    order_id: null, //订单编号
    connect_type: app.sys.DEVICE_CONNECT_BLUETOOTH,
    discharging: false,
    isBluetoothStatus: 1,
    shop_id: '',
    loadShow: true,
    tips: false,
    load2Show: false,
    pollingOrderNumber: 0
  },

  onLoad: function (data) {
    let _this = this;
    var request = data.q || ('m=' + data.m);
    console.log('REQUEST:' + request);
    console.log('DATA:', data);

    // 缓存手机基本信息
    _this.savePhoneInfo(function () {
      // 保存MAC地址
      if (data.t == 'payCharge') {
        // 已经支付过 直接放电 保存信息
        _this.data.order_id = data.order_id;
        _this.data.macAddress = data.m;
        _this.data.deviceId = data.d;
        _this.data.system = data.s;
        _this.data.edition = data.edition;
        _this.data.minute = data.time;
        _this.data.healType = data.t;
        _this.data.isConnect = data.isConnect;
        _this.data.connect_type = data.connect_type;
        _this.data.isBluetoothStatus = 2;
        _this.data.shop_id = data.shop_id;
        _this.setData({
          isPrompt: '正在唤醒小怪兽，请不要关闭此页面',
          isTitle: '唤醒不了？',
          isContent: '可尝试重启手机蓝牙后再次扫码',
          load2Show: true,
          loadShow: false,
          tips: true
        });
        //判断是否是免费订单及轮询订单状态
        if (data.isFree) {
          var startTime = new Date();
          _this.orderStatus(data.order_id, function () {
            _this.computingTime(startTime, new Date(), "pollingOrder["+_this.data.pollingOrderNumber+"]:")
            if (_this.data.connect_type == app.sys.DEVICE_CONNECT_BLUETOOTH) {
              _this.handle();
            } else {
              _this.handle2G();
            }
          })
        } else {
          if (_this.data.connect_type == app.sys.DEVICE_CONNECT_BLUETOOTH) {
            _this.handle();
          } else {
            _this.handle2G();
          }
        }

        _this.pvSend();
      } else {
        var mac_address = _this.formatUrl(request);
        utils.dump(mac_address);
        // 重新扫码
        if (request != null) {
          _this.setData({
            macAddress: mac_address,
          });
        }

        _this.dashboard(function () {
          _this.deviceConnectType(_this.data.macAddress, function (deviceType, discharging) {
            _this.getUseInfo(function (res) {
              _this.lastStatus(deviceType, discharging);
            })
          });
        });
      }
    })

    this.Prompt();
  },

  //轮询订单状态
  orderStatus: function (num, callback) {
    let _this = this;
    var time = _this.data.pollingOrderNumber == 0 ? 100 : 200* _this.data.pollingOrderNumber
    var poll = function () {
      setTimeout(function () {
        let _this = this;
        let param = {
          API_URL: '/proxy/v1/order/status',
          data: {
            order_id: num
          },
          method: 'POST',
          token: wx.getStorageSync('token')
        }
        newData.result(param).then(data => {
          if (data.data.data.status == 2 || data.data.data.status == 3) {
            callback();
          } else {
            if (++_this.data.pollingOrderNumber < 15) {
              poll();
            } else {
              //当超过15次轮询之后的逻辑要等产品确认
            }
          }
        })
      }, time)
    };
    poll();
  },

  savePhoneInfo: function (callback) {
    let _this = this;
    utils.getPhoneInfo(function (res) {
      var system = res.system;
      if (system.indexOf('iOS') >= 0) {
        _this.data.system = 'IOS';
      } else {
        _this.data.system = 'Android';
      }

      _this.data.edition = res.version;
      callback();
    })
  },

  // pv打点
  pvSend: function (pvStatus) {
    var that = this,
      status;

    if (pvStatus) {
      status = pvStatus;
    } else if (that.data.healType == 'payCharge') {
      status = 2;
    } else {
      status = 1;
    }
    // log日志
    var page_name = getCurrentPages()[getCurrentPages().length - 1].__route__;
    var parameter = {
      'parameter': {
        'url_id': 1005,
        'r_url_id': app.globalData.refer_page_id ? app.globalData.refer_page_id : 1005,
        'r_url': app.globalData.refer_page_name ? app.globalData.refer_page_name : page_name,
        'shop_id': that.data.shop_id,
        'device_id': that.data.macAddress ? that.data.macAddress : '',
        'status': status,
      },
      'body': {},
    };
    log.log(parameter);
    app.globalData.refer_page_id = 1005;
    app.globalData.refer_page_name = page_name;
  },

  /**
   * 获取设备连接类型
   */
  deviceConnectType: function (macAddress, callback) {
    let _this = this;

    let param = {
      API_URL: '/device/connect/type',
      data: {
        mac_address: macAddress,
      },
      method: 'POST',
    };
    newData.result(param).then(res => {
      var ret = res.data;
      utils.dump(ret);

      if (parseInt(ret.code) != 0) {
        // 0 蓝牙 1 2G 2 蓝牙2G
        callback(app.sys.DEVICE_CONNECT_BLUETOOTH);
      } else {
        var connect_type = ret.data.connect_type;
        var discharging = ret.data.discharging;
        var battery_ok = ret.data.battery_ok;

        _this.data.connect_type = connect_type;
        // _this.data.discharging=discharging;

        if (battery_ok == false) {
          utils.dump("设备电量过低");
          wx.showModal({
            content: '设备电量过低，请尝试其他设备！',
            showCancel: false,
            success: function (res) {
              wx.navigateBack();

              // if (res.confirm) {
              //     wx.navigateBack();
              // } else if (res.cancel) {
              //     callback(connect_type, discharging);
              // }
            },
          });
        } else {
          callback(connect_type, discharging);
        }
      }
    });
  },

  /**
   * 公告板
   */
  dashboard: function (callback) {
    let param = {
      API_URL: '/index/dashboard/0',
      data: {},
      method: 'POST',
    };
    newData.result(param).then(parameter => {
      utils.dump(parameter);
      var ret = parameter.data;
      if (ret.data.status) {
        // 显示公告板
        wx.showModal({
          content: ret.data.msg,
          showCancel: false,
          success: function (res) {
            if (ret.data.board_type == 0) {
              callback();
            } else {
              wx.navigateBack();
            }
          },
        });
      } else {
        callback();
      }
    });
  },

  /**
   * 获取该MAC地址是否存在已支付订单
   */
  lastStatus: function (deviceType, discharging) {
    let _this = this;

    utils.dump("设备连接类型：" + deviceType);
    utils.dump("设备是否正在放电：" + discharging);

    // 判断是否付过钱
    let param = {
      API_URL: '/order/last/status',
      data: {
        device_id: _this.data.macAddress,
      },
      method: 'POST',
      token: wx.getStorageSync('token'),
    };

    newData.result(param).then(parameter => {
      var ret = parameter.data;
      utils.dump('获取该MAC地址是否存在已支付订单');
      utils.dump(ret);

      _this.data.order_id = ret.data.order_id;

      if (ret.data.is_paid == 1) {
          _this.data.isPaid = true;
          _this.data.charge_time = ret.data.charge_time;
          _this.data.order_id = ret.data.order_id;

          // 设置时间、MAC地址、类型 parseInt(_this.data.minute) * 60
          if (ret.data.time_length == 0) {
            utils.dump('设备未放电');

            _this.data.healType = 'payCharge';
            _this.data.minute = parseInt(ret.data.charge_time) * 60;
            _this.data.isBluetoothStatus = 3;
            _this.setData({
              isPrompt: '正在连接小怪兽，请不要关闭此页面',
              isTitle: '连接不了？',
              isContent: '可尝试重启手机蓝牙后再次扫码',
              load2Show: false,
              loadShow: true,
              tips: false
            });

          } else if (ret.data.time_length > 0) {
            utils.dump('设备已放电 时长=' + ret.data.time_length);

            _this.data.minute = ret.data.time_length;
            // _this.setData({
            //   isPrompt: '正在唤醒小怪兽充电宝，请耐心等待...',
            //   isTitle: '唤醒不了？',
            //   isContent: '可尝试重启手机蓝牙后再次扫码',
            //   load2Show: true,
            //   loadShow: false,
            //   tips: true
            // });
            _this.data.isBluetoothStatus = 4;

          }

          // 放电
          console.log('连接设备');

          if (!discharging) {
            // 只支持蓝牙的设备
            if (wx.getStorageSync('token')) {
              _this.pvSend(_this.data.isBluetoothStatus);
              _this.connectDevice();
            } else {
              login.getLogin(_this.getUseInfo, function () {
                _this.pvSend(_this.data.isBluetoothStatus);
                _this.connectDevice();
              });
            }
          } else {
            // 正在放电的设备
            _this.redirectToTimePage();
          }
      } else {
        _this.pvSend();
        if (deviceType == app.sys.DEVICE_CONNECT_BLUETOOTH) {
          _this.handle();
        } else {
          _this.handle2G();
        }
      }
    });
  },

  /**
   * 10秒内没有跳转，显示友情提示
   */
  Prompt: function () {
    var that = this;
    var t = setTimeout(function () {
      that.setData({
        isShowPrompt: false,
      });
    }, 10000);
    that.setData({
      t: t,
    });
  },

  redirectToNopenPage: function () {
    let _this = this;
    // 若设备在工作中且已支付  跳转到time
    var url = '../Nopen/nopen?';
    var params = {
      m: _this.data.macAddress
    };
    wx.redirectTo({
      url: url + utils.jsonToUrlRaw(params),
    });
  },

  /**
   * 跳转到选择支付页面
   */
  redirectToPayPage: function (connectType, deviceId) {
    let _this = this;
    // 若设备在工作中且已支付  跳转到time
    var url = '../Pay/pay?';
    var params = {
      m: _this.data.macAddress,
      connect_type: connectType,
      d: deviceId,
      s: _this.data.system,
      edition: _this.data.edition,
    };
    wx.redirectTo({
      url: url + utils.jsonToUrlRaw(params),
    });
  },

  /**
   * 跳转到倒计时页面
   */
  redirectToTimePage: function () {
    let _this = this;
    // 若设备在工作中且已支付  跳转到time
    var url = '../Time/time?';
    var params = {
      time: _this.data.minute,
      deviceId: _this.data.deviceId,
      m: _this.data.macAddress,
      charge_time: _this.data.charge_time,
      edition: _this.data.edition,
      order_id: _this.data.order_id,
      connect_type: _this.data.connect_type,
    };
    console.log("TO_TIME_PAGE", params);
    wx.redirectTo({
      url: url + utils.jsonToUrlRaw(params),
    });
  },

  /**
   * 关闭支付页面的重定向
   */
  onShow: function () {
    var that = this;
    app.closeGoIndex();
  },

  /**
   * 页面关闭执行
   */
  onUnload: function () {
    var that = this;
    var page_name = getCurrentPages()[getCurrentPages().length - 1].__route__;
    var parameter = {
      'parameter': {
        'url_id': 1005,
        'r_url_id': app.globalData.refer_page_id ? app.globalData.refer_page_id : 1005,
        'r_url': app.globalData.refer_page_name ? app.globalData.refer_page_name : page_name,
        'shop_id': '',
        'device_id': that.data.macAddress ? that.data.macAddress : '',
        'type': 'devices_timer',
        'status': that.data.isBluetoothStatus,
      },
      'body': {
        'devices_timer': that.data.devices_timer.join(','),
      },
    };
    log.log(parameter);
  },

  /**
   * 登录权限处理
   */
  handle: function () {
    let _this = this;
    // 执行蓝牙操作
    if (wx.getStorageSync('token')) {
      _this.getUseInfo(function () {
        _this.dealBlue();
      });
    } else {
      login.getLogin(_this.getUseInfo, function () {
        _this.dealBlue();
      });
    }
  },

  handle2G: function () {
    let _this = this;
    utils.dump("2G 模块处理");
    if (_this.data.healType == 'payCharge') {
      // 已支付 等待放电
      var i = 0;
      var timer_2g = function () {
        setTimeout(function () {
          utils.dump("支付成功，等待放电");
          let param = {
            API_URL: '/device/discharge/status',
            data: {
              mac_address: _this.data.macAddress,
            },
            method: 'POST',
            token: wx.getStorageSync('token'),
          };

          newData.result(param).then(parameter => {
            var ret = parameter.data;
            if (ret.data.discharging == 1) {
              // 已放电 跳转到Time页面
              _this.data.discharging = true;
              _this.data.minute = ret.data.time;
              _this.data.charge_time = ret.data.charge_time;
              _this.redirectToTimePage();
            } else {
              if (++i < 15) {
                timer_2g();
              }
            }
          });
        }, 1000);
      };

      timer_2g();

      var j = 0;
      var timer_bluetooth = function () {
        setTimeout(function () {
          utils.dump('等待连接蓝牙');
          if (_this.data.discharging) {
            return;
          }
          if (++j > 10) {
            utils.dump('尝试连接蓝牙');
            wx.openBluetoothAdapter({
              success: function (res) {
                // 重连蓝牙
                if (!_this.data.discharging) {
                  _this.data.isConnect = 'no_connect';
                  _this.handle();
                }
              },
              fail: function (res) {
                _this.redirectToNopenPage();
                // timer_bluetooth();
              }
            });
          } else {
            timer_bluetooth();

          }
        }, 1000);
      }

      timer_bluetooth();
    } else {
      // 跳转支付页面
      _this.redirectToPayPage(app.sys.DEVICE_CONNECT_2G, null)
    }
  },

  /**
   * 判断处理类型
   */
  dealBlue: function () {
    console.log('LOADING DATA:', this.data);
    var _this = this;
    var macAddress = _this.data.macAddress;

    if (macAddress.length == 0) {
      _this.showError('请扫描怪兽二维码！');
    }

    if (_this.data.healType == 'payCharge') {
      _this.chargeDevice();
    } else {
      // 连接蓝牙设备
      _this.connectDevice();
    }
  },

  /**
   * 支付完成后处理
   */
  chargeDevice: function () {
    // 写入
    var _this = this;
    var deviceId = _this.data.deviceId;
    var system = _this.data.system;
    var edition = _this.data.edition; // 微信版本号
    var macAddress = _this.data.macAddress;
    var weite_data = new Date();
    console.log('状态是' + _this.data.isConnect);
    if (_this.data.isConnect == 'no_connect') {
      _this.data.isWork = true;
      _this.connectDevice();
      return true;
    }

    var hex = '0100000000000000000000000000000000';
    gs.write(deviceId, 7, hex, system, edition, 1000, function (res) {
      console.log('写入 ' + JSON.stringify(res));
      // 写入时间开始
      var success_write = new Date();
      _this.computingTime(weite_data, success_write, '1_write_success:');
      // 写入时间结束
      // 获取加密数据
      // 选择价格
      gs.info(deviceId, 6, system, 2000, edition, function (res) {
        // 读取时间开始
        var info_data = new Date();
        _this.computingTime(success_write, info_data, 'info_success:');
        // 读取时间结束
        // console.log("加密数据 " + res);

        var param = {
          API_URL: '/secret/key/verify',
          data: {
            data: res,
            mac_address: macAddress,
            minute: Math.ceil(_this.data.minute / 60),
          },
          method: 'GET',
          token: wx.getStorageSync('token'),
        };
        _this.getBlueSecret(param, function (data) {
          // 加密数据获取时间发送
          var obtain_encryption_time = new Date();
          _this.computingTime(info_data, obtain_encryption_time, 'obtain_encryption:');
          // console.log('密钥获取:', data);
          setTimeout(function () {
            gs.write(deviceId, 6, data, system, edition, 4000, function (res) {
              // 第二次写入时间发送
              _this.computingTime(obtain_encryption_time, new Date(), '2_write_success:');

              // console.log("写入命令的结果" + JSON.stringify(res));
              //通知开始充电
              _this.beginCharge(app.sys.DEVICE_CONNECT_BLUETOOTH);
              // let param = {
              //     API_URL: '/order/charge/begin',
              //     data: {
              //         device_id: _this.data.macAddress,
              //     },
              //     method: 'GET',
              //     token: wx.getStorageSync('token'),
              // };

              // newData.result(param).then(data => {

              // });
              // 读取
              wx.redirectTo({
                url: '../Time/time?time=' + _this.data.minute + '&deviceId=' + deviceId + '&m=' + _this.data.macAddress + '&charge_time=' + _this.data.charge_time +
                '&edition=' + edition + '&order_id=' + _this.data.order_id + '&shop_id=' + _this.data.shop_id,
              });
            }, function (err) {
              _this.computingTime(info_data, new Date(), '2_write_error:');
              var parameter = {
                device_id: deviceId,
                log_lv: 2,
                err_info: JSON.stringify(err),
                path: 'pages/load',
              };
              error.error(parameter);
              console.log('写入命令失败 ' + JSON.stringify(err));
            });
          }, 500);
        });
      }, function (res) {
        _this.computingTime(success_write, new Date(), 'info_error:');
        // _this.data.isWork = true;
        // _this.connectDevice();
      });
    });
  },

  beginCharge: function (connectType, leftTime = null) {
    let _this = this;
    let param = {
      API_URL: '/order/charge/begin',
      data: {
        device_id: _this.data.macAddress,
        connect_type: connectType,
        left_time: leftTime,
      },
      method: 'GET',
      token: wx.getStorageSync('token'),
    };

    newData.result(param).then(data => {

    });
  },
  /**
   * 扫码后的处理，链接蓝牙设备，获取设备信息等
   */
  connectDevice: function () {
    console.log('连接设备！！！');
    var _this = this;
    var macAddress = _this.data.macAddress;
    // 判断是否扫描二维码
    if (macAddress.length == 0) {
      _this.showError('请扫描怪兽二维码！');
    }

    // 判断蓝牙是否可用
    if (!wx.openBluetoothAdapter) {
      wx.showModal({
        title: '提示',
        content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'
      });
      return;
    }

    wx.openBluetoothAdapter({
      success: function (res) {
        console.log('打开适配器成功！');
        gs.getPhoneInfo(function (res) {
          var system = res.system;
          if (system.indexOf('iOS') >= 0) {
            system = 'IOS';
          } else {
            system = 'Android';
          }
          app.setPhoneSystem(system);
          app.setMacAddress(macAddress);
          // 系统版本
          var edition = res.version;
          var init_data = new Date();
          gs.init(macAddress, system, function (res) {
            console.log('初始化GS库 成功' + JSON.stringify(res));
            var deviceId = res.deviceId;
            // _this.deviceId = deviceId;

            // 更新参数
            _this.data.isConnect = 'connect';
            _this.data.deviceId = deviceId;
            _this.data.system = system;
            _this.data.edition = edition;

            console.log('前：', app.globalData.deviceId);
            app.setDeviceId(deviceId);
            console.log('后：', app.globalData.deviceId);
            // console.log(deviceId);
            // init运行时间开始
            var success_init = new Date();
            _this.computingTime(init_data, success_init, res.two_connect ? '2-init-success:' : '1-init-success:');
            // init运行时间结束
            // 读取
            gs.info3(deviceId, system, 500, edition, function (res) {
              // info3运行时间开始
              var success_info3_data = new Date();
              _this.computingTime(success_init, success_info3_data, res.two_info3 ? '2-info3-success:' : '1-info3-success:');
              // info3运行时间结束
              console.log('数据三 ' + res.res);
              console.log('电源状态 ' + res.PBStatus);
              console.log('剩余时间' + res.PBLeftTime);
              var left_time = parseInt(res.PBLeftTime, 16);
              let param = {
                API_URL: '/devices/update/status',
                data: {
                  device_id: macAddress.replace(/:/g, ''),
                  status: res.PBStatus,
                },
                method: 'GET',
                token: wx.getStorageSync('token'),
              };
              newData.result(param).then(data => {
                console.log('devices/update', data);
              });

              if (res.PBStatus != '00' && res.PBStatus != '80') {
                var parameter = {
                  device_id: macAddress,
                  device_status: res.PBStatus,
                  log_lv: 4,
                  err_info: JSON.stringify(res),
                  path: 'pages/load',
                };
                error.error(parameter);
                if (res.PBStatus == '02') {
                  // 设备正在充电，不可用
                  _this.showError('小怪兽在补充能量\n请先拔掉其充电线，再为手机充电');
                } else if (_this.data.connect_type == app.sys.DEVICE_CONNECT_2G) {
                  _this.beginCharge(app.sys.DEVICE_CONNECT_2G, left_time);
                  _this.data.minute = left_time * 60;
                  _this.redirectToTimePage();
                } else if (!_this.data.isPaid) {
                  // 若设备在工作中且没支付  报错
                  _this.showError('小怪兽已在工作中，请直接连接充电线！');
                } else {
                  // 若设备在工作中且已支付  跳转到time
                  // TODO
                  // _this.beginCharge();
                  _this.redirectToTimePage();
                  // wx.redirectTo({
                  //     url: '../Time/time?time=' + _this.data.minute + '&deviceId=' + deviceId + '&m=' + _this.data.macAddress + '&charge_time=' +
                  //     _this.data.charge_time + '&edition=' + edition + '&order_id=' + _this.data.order_id,
                  // });
                }
                // 关掉蓝牙连接
                _this.disconnect();
                return;
              }
              if (res.PBStatus != '00' && res.PBStatus == '80') {
                _this.showError('很抱歉，小怪兽已经累趴了\n请联系服务员充电');
                clearTimeout(_this.data.t);
                _this.setData({
                  isShowPrompt: true,
                });
                return false;
              }

              // _this.data.isConnect = 'connect';
              // _this.data.deviceId = deviceId;
              // _this.data.system = system;
              // _this.data.edition = edition;

              if (_this.data.isWork) {
                _this.dealBlue();
                return false;
              }
              if (!_this.data.isPaid) {
                _this.redirectToPayPage(app.sys.DEVICE_CONNECT_BLUETOOTH, deviceId);
                return;
              } else {
                _this.data.isConnect = 'connect';
                _this.data.healType = 'payCharge';
                _this.dealBlue();
              }

            }, function (res) {
              // info3 运行失败
              _this.computingTime(success_init, new Date(), 'info3-error:');
              // 上报错误
              res.msg = '暂时无法连接小怪兽，请重启蓝牙后再试';
              var parameter = {
                device_id: deviceId,
                log_lv: 4,
                err_info: JSON.stringify(res),
                path: 'pages/load',
              };
              error.error(parameter);
              _this.showError(res.msg);
            });
          }, function (err) {
            console.log('init连接失败');
            // init 运行失败
            _this.computingTime(init_data, new Date(), 'init-error:');
            // 上报错误
            console.log('初始化GS库失败' + JSON.stringify(res));
            console.log('INIT ERROR' + macAddress);
            var parameter = {
              device_id: macAddress,
              device_status: res.PBStatus ? res.PBStatus : '',
              log_lv: 4,
              err_info: JSON.stringify(err),
              path: 'pages/load',
            };
            error.error(parameter);
            _this.showError(err.errMsg, 'error');
          });
        });
      },
      fail: function (res) {
        var parameter = {
          log_lv: 2,
          err_info: JSON.stringify(res),
          path: 'pages/load',
        };
        error.error(parameter);
        wx.redirectTo({
          url: '../Nopen/nopen?m=' + macAddress,
        });
        console.log('蓝牙未开启');
      },
    });
  },

  /**
   * 获取用户信息
   */
  getUseInfo: function (callback) {
    let _this = this;
    let param = {
      API_URL: '/user/info',
      data: {},
      method: 'GET',
      token: wx.getStorageSync('token'),
    };

    newData.result(param).then(data => {
      console.log(data);
      if (data.data.code == 1403) {
        login.getLogin(_this.getUseInfo, callback);
        return;
      }
      if (!data.data.data.mobile) {
        login.getLogin(_this.noRegister);
      } else {
        callback();
      }
    });
  },

  // 没有注册用户跳转
  noRegister: function(){
    var _this = this;
    _this.pvSend();

    wx.redirectTo({
      url: '../Login/login?m=' + _this.data.macAddress + '&t=connect',
    });
  },

  /**
   * 错误处理
   */
  showError: function (err, type) {
    var path = '../index';
    if (type == 'error') {
      wx.redirectTo({
        url: '../Error/error',
      });
      return;
    }
    wx.showModal({
      content: err,
      showCancel: false,
      success: function (res) {
        wx.redirectTo({
          url: path,
        });
      },
    });
  },

  /**
   *  处理扫码传入的url
   */
  formatUrl: function (q) {
    var url = decodeURIComponent(q);
    var reg = new RegExp('m=(.*)$', 'i');
    var result = url.match(reg);
    if (result != null && result.length >= 2) {
      result = gs.formatMacAddress(result[1]);
    } else {
      console.log('外部链接判定', url);
      var reg = new RegExp('\/[wzt]\/(.*)$', 'i');
      result = url.match(reg);
      result = gs.formatMacAddress(result[1]);
    }
    console.log(result);
    return result;
  },

  /**
   * 关闭蓝牙
   */
  disconnect: function () {
    var _this = this;
    var deviceId = this.deviceId;
    gs.disconnect(deviceId, function (res) {
      console.log('关闭蓝牙连接成功 ' + JSON.stringify(res));
    }, function (err) {
      var parameter = {
        device_id: deviceId,
        log_lv: 3,
        err_info: JSON.stringify(err),
        path: 'pages/load',
      };
      error.error(parameter);
      console.log('关闭蓝牙连接失败 ' + JSON.stringify(err));
    });
  },
  /**
   * 获取设备密钥
   */
  getBlueSecret: function (param, callback) {
    var _this = this;
    newData.result(param).then(res => {
      var jsonData = res.data;
      console.log(jsonData);
      if (jsonData.status == 1) {
        var data = jsonData.data.data;
        callback(data);
      } else if (jsonData.status == 0) {
        _this.showError(jsonData.message, 'error');
      }
    });
  },
  /**
   * 时间差
   */
  computingTime: function (start_time, end_time, is_success = 'success') {
    var seconds = is_success + (end_time.getTime() - start_time.getTime()) / 1000;
    this.data.devices_timer.push(seconds);
  },
});